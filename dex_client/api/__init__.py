# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: api.proto
# plugin: python-betterproto
# This file has been @generated

from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class Client(betterproto.Message):
    """Client represents an OAuth2 client."""

    id: str = betterproto.string_field(1)
    secret: str = betterproto.string_field(2)
    redirect_uris: List[str] = betterproto.string_field(3)
    trusted_peers: List[str] = betterproto.string_field(4)
    public: bool = betterproto.bool_field(5)
    name: str = betterproto.string_field(6)
    logo_url: str = betterproto.string_field(7)


@dataclass(eq=False, repr=False)
class GetClientReq(betterproto.Message):
    """GetClientReq is a request to retrieve client details."""

    id: str = betterproto.string_field(1)
    """The ID of the client."""


@dataclass(eq=False, repr=False)
class GetClientResp(betterproto.Message):
    """GetClientResp returns the client details."""

    client: "Client" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateClientReq(betterproto.Message):
    """CreateClientReq is a request to make a client."""

    client: "Client" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateClientResp(betterproto.Message):
    """CreateClientResp returns the response from creating a client."""

    already_exists: bool = betterproto.bool_field(1)
    client: "Client" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class DeleteClientReq(betterproto.Message):
    """DeleteClientReq is a request to delete a client."""

    id: str = betterproto.string_field(1)
    """The ID of the client."""


@dataclass(eq=False, repr=False)
class DeleteClientResp(betterproto.Message):
    """DeleteClientResp determines if the client is deleted successfully."""

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class UpdateClientReq(betterproto.Message):
    """UpdateClientReq is a request to update an existing client."""

    id: str = betterproto.string_field(1)
    redirect_uris: List[str] = betterproto.string_field(2)
    trusted_peers: List[str] = betterproto.string_field(3)
    name: str = betterproto.string_field(4)
    logo_url: str = betterproto.string_field(5)


@dataclass(eq=False, repr=False)
class UpdateClientResp(betterproto.Message):
    """UpdateClientResp returns the response from updating a client."""

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class Password(betterproto.Message):
    """Password is an email for password mapping managed by the storage."""

    email: str = betterproto.string_field(1)
    hash: bytes = betterproto.bytes_field(2)
    """
    Currently we do not accept plain text passwords. Could be an option in the future.
    """

    username: str = betterproto.string_field(3)
    user_id: str = betterproto.string_field(4)


@dataclass(eq=False, repr=False)
class CreatePasswordReq(betterproto.Message):
    """CreatePasswordReq is a request to make a password."""

    password: "Password" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreatePasswordResp(betterproto.Message):
    """CreatePasswordResp returns the response from creating a password."""

    already_exists: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class UpdatePasswordReq(betterproto.Message):
    """UpdatePasswordReq is a request to modify an existing password."""

    email: str = betterproto.string_field(1)
    """The email used to lookup the password. This field cannot be modified"""

    new_hash: bytes = betterproto.bytes_field(2)
    new_username: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class UpdatePasswordResp(betterproto.Message):
    """
    UpdatePasswordResp returns the response from modifying an existing password.
    """

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DeletePasswordReq(betterproto.Message):
    """DeletePasswordReq is a request to delete a password."""

    email: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeletePasswordResp(betterproto.Message):
    """DeletePasswordResp returns the response from deleting a password."""

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ListPasswordReq(betterproto.Message):
    """ListPasswordReq is a request to enumerate passwords."""

    pass


@dataclass(eq=False, repr=False)
class ListPasswordResp(betterproto.Message):
    """ListPasswordResp returns a list of passwords."""

    passwords: List["Password"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class Connector(betterproto.Message):
    """
    Connector is a strategy used by Dex for authenticating a user against another identity provider
    """

    id: str = betterproto.string_field(1)
    type: str = betterproto.string_field(2)
    name: str = betterproto.string_field(3)
    config: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class CreateConnectorReq(betterproto.Message):
    """CreateConnectorReq is a request to make a connector."""

    connector: "Connector" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class CreateConnectorResp(betterproto.Message):
    """CreateConnectorResp returns the response from creating a connector."""

    already_exists: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class UpdateConnectorReq(betterproto.Message):
    """UpdateConnectorReq is a request to modify an existing connector."""

    id: str = betterproto.string_field(1)
    """The id used to lookup the connector. This field cannot be modified"""

    new_type: str = betterproto.string_field(2)
    new_name: str = betterproto.string_field(3)
    new_config: bytes = betterproto.bytes_field(4)


@dataclass(eq=False, repr=False)
class UpdateConnectorResp(betterproto.Message):
    """
    UpdateConnectorResp returns the response from modifying an existing connector.
    """

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class DeleteConnectorReq(betterproto.Message):
    """DeleteConnectorReq is a request to delete a connector."""

    id: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class DeleteConnectorResp(betterproto.Message):
    """DeleteConnectorResp returns the response from deleting a connector."""

    not_found: bool = betterproto.bool_field(1)


@dataclass(eq=False, repr=False)
class ListConnectorReq(betterproto.Message):
    """ListConnectorReq is a request to enumerate connectors."""

    pass


@dataclass(eq=False, repr=False)
class ListConnectorResp(betterproto.Message):
    """ListConnectorResp returns a list of connectors."""

    connectors: List["Connector"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class VersionReq(betterproto.Message):
    """VersionReq is a request to fetch version info."""

    pass


@dataclass(eq=False, repr=False)
class VersionResp(betterproto.Message):
    """VersionResp holds the version info of components."""

    server: str = betterproto.string_field(1)
    """Semantic version of the server."""

    api: int = betterproto.int32_field(2)
    """
    Numeric version of the API. It increases every time a new call is added to the API.
     Clients should use this info to determine if the server supports specific features.
    """


@dataclass(eq=False, repr=False)
class DiscoveryReq(betterproto.Message):
    """DiscoveryReq is a request to fetch discover information."""

    pass


@dataclass(eq=False, repr=False)
class DiscoveryResp(betterproto.Message):
    """DiscoverResp holds the version oidc disovery info."""

    issuer: str = betterproto.string_field(1)
    authorization_endpoint: str = betterproto.string_field(2)
    token_endpoint: str = betterproto.string_field(3)
    jwks_uri: str = betterproto.string_field(4)
    userinfo_endpoint: str = betterproto.string_field(5)
    device_authorization_endpoint: str = betterproto.string_field(6)
    introspection_endpoint: str = betterproto.string_field(7)
    grant_types_supported: List[str] = betterproto.string_field(8)
    response_types_supported: List[str] = betterproto.string_field(9)
    subject_types_supported: List[str] = betterproto.string_field(10)
    id_token_signing_alg_values_supported: List[str] = betterproto.string_field(11)
    code_challenge_methods_supported: List[str] = betterproto.string_field(12)
    scopes_supported: List[str] = betterproto.string_field(13)
    token_endpoint_auth_methods_supported: List[str] = betterproto.string_field(14)
    claims_supported: List[str] = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class RefreshTokenRef(betterproto.Message):
    """
    RefreshTokenRef contains the metadata for a refresh token that is managed by the storage.
    """

    id: str = betterproto.string_field(1)
    """ID of the refresh token."""

    client_id: str = betterproto.string_field(2)
    created_at: int = betterproto.int64_field(5)
    last_used: int = betterproto.int64_field(6)


@dataclass(eq=False, repr=False)
class ListRefreshReq(betterproto.Message):
    """
    ListRefreshReq is a request to enumerate the refresh tokens of a user.
    """

    user_id: str = betterproto.string_field(1)
    """The "sub" claim returned in the ID Token."""


@dataclass(eq=False, repr=False)
class ListRefreshResp(betterproto.Message):
    """ListRefreshResp returns a list of refresh tokens for a user."""

    refresh_tokens: List["RefreshTokenRef"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class RevokeRefreshReq(betterproto.Message):
    """
    RevokeRefreshReq is a request to revoke the refresh token of the user-client pair.
    """

    user_id: str = betterproto.string_field(1)
    """The "sub" claim returned in the ID Token."""

    client_id: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class RevokeRefreshResp(betterproto.Message):
    """
    RevokeRefreshResp determines if the refresh token is revoked successfully.
    """

    not_found: bool = betterproto.bool_field(1)
    """
    Set to true is refresh token was not found and token could not be revoked.
    """


@dataclass(eq=False, repr=False)
class VerifyPasswordReq(betterproto.Message):
    email: str = betterproto.string_field(1)
    password: str = betterproto.string_field(2)


@dataclass(eq=False, repr=False)
class VerifyPasswordResp(betterproto.Message):
    verified: bool = betterproto.bool_field(1)
    not_found: bool = betterproto.bool_field(2)


class DexStub(betterproto.ServiceStub):
    async def get_client(
        self,
        get_client_req: "GetClientReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetClientResp":
        return await self._unary_unary(
            "/api.Dex/GetClient",
            get_client_req,
            GetClientResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_client(
        self,
        create_client_req: "CreateClientReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateClientResp":
        return await self._unary_unary(
            "/api.Dex/CreateClient",
            create_client_req,
            CreateClientResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_client(
        self,
        update_client_req: "UpdateClientReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateClientResp":
        return await self._unary_unary(
            "/api.Dex/UpdateClient",
            update_client_req,
            UpdateClientResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_client(
        self,
        delete_client_req: "DeleteClientReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteClientResp":
        return await self._unary_unary(
            "/api.Dex/DeleteClient",
            delete_client_req,
            DeleteClientResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_password(
        self,
        create_password_req: "CreatePasswordReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreatePasswordResp":
        return await self._unary_unary(
            "/api.Dex/CreatePassword",
            create_password_req,
            CreatePasswordResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_password(
        self,
        update_password_req: "UpdatePasswordReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdatePasswordResp":
        return await self._unary_unary(
            "/api.Dex/UpdatePassword",
            update_password_req,
            UpdatePasswordResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_password(
        self,
        delete_password_req: "DeletePasswordReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeletePasswordResp":
        return await self._unary_unary(
            "/api.Dex/DeletePassword",
            delete_password_req,
            DeletePasswordResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_passwords(
        self,
        list_password_req: "ListPasswordReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListPasswordResp":
        return await self._unary_unary(
            "/api.Dex/ListPasswords",
            list_password_req,
            ListPasswordResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def create_connector(
        self,
        create_connector_req: "CreateConnectorReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "CreateConnectorResp":
        return await self._unary_unary(
            "/api.Dex/CreateConnector",
            create_connector_req,
            CreateConnectorResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_connector(
        self,
        update_connector_req: "UpdateConnectorReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "UpdateConnectorResp":
        return await self._unary_unary(
            "/api.Dex/UpdateConnector",
            update_connector_req,
            UpdateConnectorResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_connector(
        self,
        delete_connector_req: "DeleteConnectorReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DeleteConnectorResp":
        return await self._unary_unary(
            "/api.Dex/DeleteConnector",
            delete_connector_req,
            DeleteConnectorResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_connectors(
        self,
        list_connector_req: "ListConnectorReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListConnectorResp":
        return await self._unary_unary(
            "/api.Dex/ListConnectors",
            list_connector_req,
            ListConnectorResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_version(
        self,
        version_req: "VersionReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VersionResp":
        return await self._unary_unary(
            "/api.Dex/GetVersion",
            version_req,
            VersionResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def get_discovery(
        self,
        discovery_req: "DiscoveryReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "DiscoveryResp":
        return await self._unary_unary(
            "/api.Dex/GetDiscovery",
            discovery_req,
            DiscoveryResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def list_refresh(
        self,
        list_refresh_req: "ListRefreshReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "ListRefreshResp":
        return await self._unary_unary(
            "/api.Dex/ListRefresh",
            list_refresh_req,
            ListRefreshResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def revoke_refresh(
        self,
        revoke_refresh_req: "RevokeRefreshReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "RevokeRefreshResp":
        return await self._unary_unary(
            "/api.Dex/RevokeRefresh",
            revoke_refresh_req,
            RevokeRefreshResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def verify_password(
        self,
        verify_password_req: "VerifyPasswordReq",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "VerifyPasswordResp":
        return await self._unary_unary(
            "/api.Dex/VerifyPassword",
            verify_password_req,
            VerifyPasswordResp,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class DexBase(ServiceBase):

    async def get_client(self, get_client_req: "GetClientReq") -> "GetClientResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_client(
        self, create_client_req: "CreateClientReq"
    ) -> "CreateClientResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_client(
        self, update_client_req: "UpdateClientReq"
    ) -> "UpdateClientResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_client(
        self, delete_client_req: "DeleteClientReq"
    ) -> "DeleteClientResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_password(
        self, create_password_req: "CreatePasswordReq"
    ) -> "CreatePasswordResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_password(
        self, update_password_req: "UpdatePasswordReq"
    ) -> "UpdatePasswordResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_password(
        self, delete_password_req: "DeletePasswordReq"
    ) -> "DeletePasswordResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_passwords(
        self, list_password_req: "ListPasswordReq"
    ) -> "ListPasswordResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def create_connector(
        self, create_connector_req: "CreateConnectorReq"
    ) -> "CreateConnectorResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_connector(
        self, update_connector_req: "UpdateConnectorReq"
    ) -> "UpdateConnectorResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_connector(
        self, delete_connector_req: "DeleteConnectorReq"
    ) -> "DeleteConnectorResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_connectors(
        self, list_connector_req: "ListConnectorReq"
    ) -> "ListConnectorResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_version(self, version_req: "VersionReq") -> "VersionResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def get_discovery(self, discovery_req: "DiscoveryReq") -> "DiscoveryResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def list_refresh(
        self, list_refresh_req: "ListRefreshReq"
    ) -> "ListRefreshResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def revoke_refresh(
        self, revoke_refresh_req: "RevokeRefreshReq"
    ) -> "RevokeRefreshResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def verify_password(
        self, verify_password_req: "VerifyPasswordReq"
    ) -> "VerifyPasswordResp":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_client(
        self, stream: "grpclib.server.Stream[GetClientReq, GetClientResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_client(request)
        await stream.send_message(response)

    async def __rpc_create_client(
        self, stream: "grpclib.server.Stream[CreateClientReq, CreateClientResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_client(request)
        await stream.send_message(response)

    async def __rpc_update_client(
        self, stream: "grpclib.server.Stream[UpdateClientReq, UpdateClientResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_client(request)
        await stream.send_message(response)

    async def __rpc_delete_client(
        self, stream: "grpclib.server.Stream[DeleteClientReq, DeleteClientResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_client(request)
        await stream.send_message(response)

    async def __rpc_create_password(
        self, stream: "grpclib.server.Stream[CreatePasswordReq, CreatePasswordResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_password(request)
        await stream.send_message(response)

    async def __rpc_update_password(
        self, stream: "grpclib.server.Stream[UpdatePasswordReq, UpdatePasswordResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_password(request)
        await stream.send_message(response)

    async def __rpc_delete_password(
        self, stream: "grpclib.server.Stream[DeletePasswordReq, DeletePasswordResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_password(request)
        await stream.send_message(response)

    async def __rpc_list_passwords(
        self, stream: "grpclib.server.Stream[ListPasswordReq, ListPasswordResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_passwords(request)
        await stream.send_message(response)

    async def __rpc_create_connector(
        self, stream: "grpclib.server.Stream[CreateConnectorReq, CreateConnectorResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_connector(request)
        await stream.send_message(response)

    async def __rpc_update_connector(
        self, stream: "grpclib.server.Stream[UpdateConnectorReq, UpdateConnectorResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_connector(request)
        await stream.send_message(response)

    async def __rpc_delete_connector(
        self, stream: "grpclib.server.Stream[DeleteConnectorReq, DeleteConnectorResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_connector(request)
        await stream.send_message(response)

    async def __rpc_list_connectors(
        self, stream: "grpclib.server.Stream[ListConnectorReq, ListConnectorResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_connectors(request)
        await stream.send_message(response)

    async def __rpc_get_version(
        self, stream: "grpclib.server.Stream[VersionReq, VersionResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_version(request)
        await stream.send_message(response)

    async def __rpc_get_discovery(
        self, stream: "grpclib.server.Stream[DiscoveryReq, DiscoveryResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_discovery(request)
        await stream.send_message(response)

    async def __rpc_list_refresh(
        self, stream: "grpclib.server.Stream[ListRefreshReq, ListRefreshResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.list_refresh(request)
        await stream.send_message(response)

    async def __rpc_revoke_refresh(
        self, stream: "grpclib.server.Stream[RevokeRefreshReq, RevokeRefreshResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.revoke_refresh(request)
        await stream.send_message(response)

    async def __rpc_verify_password(
        self, stream: "grpclib.server.Stream[VerifyPasswordReq, VerifyPasswordResp]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.verify_password(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/api.Dex/GetClient": grpclib.const.Handler(
                self.__rpc_get_client,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetClientReq,
                GetClientResp,
            ),
            "/api.Dex/CreateClient": grpclib.const.Handler(
                self.__rpc_create_client,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateClientReq,
                CreateClientResp,
            ),
            "/api.Dex/UpdateClient": grpclib.const.Handler(
                self.__rpc_update_client,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateClientReq,
                UpdateClientResp,
            ),
            "/api.Dex/DeleteClient": grpclib.const.Handler(
                self.__rpc_delete_client,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteClientReq,
                DeleteClientResp,
            ),
            "/api.Dex/CreatePassword": grpclib.const.Handler(
                self.__rpc_create_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreatePasswordReq,
                CreatePasswordResp,
            ),
            "/api.Dex/UpdatePassword": grpclib.const.Handler(
                self.__rpc_update_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdatePasswordReq,
                UpdatePasswordResp,
            ),
            "/api.Dex/DeletePassword": grpclib.const.Handler(
                self.__rpc_delete_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeletePasswordReq,
                DeletePasswordResp,
            ),
            "/api.Dex/ListPasswords": grpclib.const.Handler(
                self.__rpc_list_passwords,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListPasswordReq,
                ListPasswordResp,
            ),
            "/api.Dex/CreateConnector": grpclib.const.Handler(
                self.__rpc_create_connector,
                grpclib.const.Cardinality.UNARY_UNARY,
                CreateConnectorReq,
                CreateConnectorResp,
            ),
            "/api.Dex/UpdateConnector": grpclib.const.Handler(
                self.__rpc_update_connector,
                grpclib.const.Cardinality.UNARY_UNARY,
                UpdateConnectorReq,
                UpdateConnectorResp,
            ),
            "/api.Dex/DeleteConnector": grpclib.const.Handler(
                self.__rpc_delete_connector,
                grpclib.const.Cardinality.UNARY_UNARY,
                DeleteConnectorReq,
                DeleteConnectorResp,
            ),
            "/api.Dex/ListConnectors": grpclib.const.Handler(
                self.__rpc_list_connectors,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListConnectorReq,
                ListConnectorResp,
            ),
            "/api.Dex/GetVersion": grpclib.const.Handler(
                self.__rpc_get_version,
                grpclib.const.Cardinality.UNARY_UNARY,
                VersionReq,
                VersionResp,
            ),
            "/api.Dex/GetDiscovery": grpclib.const.Handler(
                self.__rpc_get_discovery,
                grpclib.const.Cardinality.UNARY_UNARY,
                DiscoveryReq,
                DiscoveryResp,
            ),
            "/api.Dex/ListRefresh": grpclib.const.Handler(
                self.__rpc_list_refresh,
                grpclib.const.Cardinality.UNARY_UNARY,
                ListRefreshReq,
                ListRefreshResp,
            ),
            "/api.Dex/RevokeRefresh": grpclib.const.Handler(
                self.__rpc_revoke_refresh,
                grpclib.const.Cardinality.UNARY_UNARY,
                RevokeRefreshReq,
                RevokeRefreshResp,
            ),
            "/api.Dex/VerifyPassword": grpclib.const.Handler(
                self.__rpc_verify_password,
                grpclib.const.Cardinality.UNARY_UNARY,
                VerifyPasswordReq,
                VerifyPasswordResp,
            ),
        }
